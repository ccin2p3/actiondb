use matcher::trie::node::{CompiledPattern};
use matcher::trie::node::{Node, NodeType};
use parsers::{SetParser, IntParser};

#[pub]
pattern -> CompiledPattern<'input>
  = pattern_parts+
  / "" { Vec::new() }

pattern_parts -> NodeType<'input>
  = (!"%{" .)+ { NodeType::Literal(match_str) }
  / "%{" pb:parser_body "}" { pb }

parser_body -> NodeType<'input>
  = parser_type:identifier ":" parser_name:identifier {?
    if parser_type == "INT" {
      let parser = Box::new(IntParser::from_str(parser_name));
      Ok(NodeType::Parser(parser))
    } else {
      Err("No parser found with this type")
    }
  }

identifier -> &'input str
  = ([a-z-A-Z_]![-])+ { match_str }

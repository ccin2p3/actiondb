use matcher::trie::node::{CompiledPattern};
use matcher::trie::node::{Node, NodeType};
use parsers::{SetParser, IntParser};

identifier -> &'input str
  = ([a-z-A-Z_]![-])+ { match_str }

parser_type -> &'input str
  = identifier

parser_name -> &'input str
  = identifier

literal -> &'input str
  = (. !"%{")* { match_str }

#[pub]
part_parser -> NodeType<'input>
  = "%{" pt:parser_type ":" pin:parser_name "}" {?
  if pt == "INT" {
    let parser = Box::new(IntParser::from_str(pin));
    Ok(NodeType::Parser(parser))
  } else {
    Err("No parser found with this type")
  }
}

#[pub]
part_literal -> NodeType<'input>
  = lit:literal { NodeType::Literal(lit) }

#[pub]
pattern -> CompiledPattern<'input>
  = ps: pattern_parts* { ps }

pattern_parts -> NodeType<'input>
  = p:part_parser { p }
  / l:part_literal { l }

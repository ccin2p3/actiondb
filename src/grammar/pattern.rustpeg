use matcher::trie::node::{CompiledPattern};
use matcher::trie::node::{Node, NodeType};
use parsers::{SetParser, IntParser};
use grammar;

#[pub]
pattern -> CompiledPattern
  = pattern_parts+
  / "" { Vec::new() }

pattern_parts -> NodeType
  = (!"%{" .)+ {
      let unescaped_literal = grammar::unescape_literal(match_str);
      NodeType::Literal(unescaped_literal)
    }
  / "%{" pb:parser_body "}" { pb }

parser_body -> NodeType
  = parser_type:identifier ":" parser_name:identifier {?
    if parser_type == "INT" {
      let parser = Box::new(IntParser::from_str(parser_name));
      Ok(NodeType::Parser(parser))
    } else {
      Err("No parser found with this type")
    }
  }

identifier -> &'input str
  = ([a-z-A-Z0-9_]![-])+ { match_str }
